version: '3'
services:
  eureka:
    build: ./eureka
    networks:
    - mynetwork
    ports:
    - 8761:8761
  oauth2:
    environment:
      SPRING_PROFILES_ACTIVE: docker_env
      ENV_HOST: 192.168.99.101
    build: ./oauth2
    networks:
    - mynetwork
    ports:
    - 8585:8585
  zipkin:
    environment:
      SPRING_PROFILES_ACTIVE: docker_env
      ENV_HOST: 192.168.99.101
    build: ./zipkin
    networks:
    - mynetwork
    ports:
    - 9411:9411
  config:
    environment:
      SPRING_PROFILES_ACTIVE: docker_env,native
      ENV_HOST: 192.168.99.101
    build: ./config
    networks:
    - mynetwork
    ports:
    - 8888:8888
  zuul:
    environment:
      SPRING_PROFILES_ACTIVE: docker_env
      ENV_HOST: 192.168.99.101
    build: ./zuul
    networks:
    - mynetwork
    ports:
    - 9999:9999
  client:
    environment:
      SPRING_PROFILES_ACTIVE: docker_env
      ENV_HOST: 192.168.99.101
    build: ./client
    networks:
    - mynetwork
    depends_on:
    - config
    - eureka
    - oauth2
    - zipkin
    - zuul
    - mongodb
  eventclient:
    environment:
      SPRING_PROFILES_ACTIVE: docker_env
      ENV_HOST: 192.168.99.101
    build: ./eventclient
    networks:
    - mynetwork
    depends_on:
    - kafka
    ports:
    - 8080:8080
  mongodb:
    image: mongo:latest
    container_name: "mongodb"
    networks:
      - mynetwork
    environment:
      - MONGO_DATA_DIR=/data/mongodb
      - MONGO_LOG_DIR=/dev/null
    volumes:
      - ./data/mongodb:/data/mongodb
    ports:
        - 27017:27017
    command: mongod --bind_ip_all --smallfiles --logpath=/dev/null # --quiet
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - mynetwork
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.101
      ADVERTISED_LISTENERS: PLAINTEXT://192.168.99.101:9092
      #KAFKA_ADVERTISED_PORT:  9092
      #Topic 1 will have 1 partition and 3 replicas, Topic 2 will have 1 partition, 1 replica and a cleanup.policy set to compact
      #KAFKA_CREATE_TOPICS: "Topic1:1:3,Topic2:1:1:compact"
      #KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "eventtopic:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - mynetwork      
networks:
  mynetwork:
    driver: bridge
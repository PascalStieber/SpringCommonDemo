environment:
  host: ${ENV_HOST}  
 
eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
server:
  port: 8080
  servlet:
    session:
      cookie:
        name: CLIENTSESSION
      
spring:  
  cloud:
    stream:
      bindings:
        output:
            destination:  eventtopic
            content-type: application/json
        input:
            destination:  eventtopic
            content-type: application/json
      kafka:
        binder:
          brokers: 192.168.99.101
  zipkin:
    baseUrl:  http://localhost:9411
  data:
    mongodb:
      host: localhost
      port: 27017
security:
  oauth2:
    client:
      clientId: SampleClientId
      clientSecret: secret
      access-token-uri: http://localhost:8585/secret/oauth/token
      user-authorization-uri: http://localhost:8585/secret/oauth/authorize
    resource:
      user-info-uri: http://localhost:8585/secret/user/me

logging:
  level:
    org.springframework.security: trace
management:
  endpoints:
    web:
      exposure:
        include: hystrix.stream
#        include: "*"

---
spring:
  profiles: docker_env
  data:
    mongodb:
      host: ${ENV_HOST}
      port: 27017
  cloud:
    stream:
      bindings:
        output:
            destination:  eventtopic
            content-type: application/json
        input:
            destination:  eventtopic
            content-type: application/json
      kafka:
        binder:
          brokers: ${ENV_HOST}
    config:
      uri: http://${ENV_HOST}:9999/config
  zipkin:
    baseUrl:  http://${ENV_HOST}:9411
  thymeleaf:
    cache: false
eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka:8761/eureka/
security:
  oauth2:
    client:
      clientId: SampleClientId
      clientSecret: secret
      access-token-uri: http://${ENV_HOST}:8585/secret/oauth/token
      user-authorization-uri: http://${ENV_HOST}:8585/secret/oauth/authorize
    resource:
      user-info-uri: http://${ENV_HOST}:8585/secret/user/me
---
spring:
  profiles: local_auth
security:
  oauth2:
    client:
      clientId: ClientId
      clientSecret: secret
      accessTokenUri: http://localhost:8081/auth/oauth/token
      userAuthorizationUri: http://localhost:8081/auth/oauth/authorize
    resource:
      userInfoUri: http://localhost:8081/auth/rest/hello/principal
